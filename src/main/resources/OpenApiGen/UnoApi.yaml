openapi: 3.0.3
info:
  title: Uno BE APi
  description: Uno BE APi
  version: 1.0.0
servers:
  - url: 'http'
    description: Uno BE Api
paths:
  /users:
    get:
      tags:
        - User
      summary: Endpoint for get all users
      operationId: getUsers
      responses:
        '200':
          description: All users
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: Error

  /users/{id}:
    get:
      tags:
        - User
      summary: Get user by specyfic id
      operationId: getUserById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: User data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: No user with this Id
    delete:
      tags:
        - User
      summary: Delete user by id
      operationId: deleteUser
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: User succesfully deleted
        400:
          description: User cannot be deleted

  /login/register:
    put:
      tags:
        - Login
      summary: Register new user
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUser'
      responses:
        '200':
          description: new user datae
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: bad password or user

  /login:
    post:
      tags:
        - Login
      summary: Login into application
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUser'
      responses:
        200:
          description: User succesfully log in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Bad password or login

  /login/change:
    post:
      tags:
        - Login
      summary: Change password
      operationId: changeData
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeUserData'
      responses:
        200:
          description: data chaged
        400:
          description: cannot change user data

  /image:
    post:
      tags:
        - FileStorage
      summary: Endpoint to store an image
      operationId: addImage
      requestBody:
        required: true
        content:
          # a binary file of type png or jpeg
          'image/jpeg':
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: User loged
          content:
            'image/jpeg':
              schema:
                type: string
                format: binary
        400:
          description: bad password or user

  /game/create:
    post:
      tags:
        - Game
      summary: Endpoint to create new game
      operationId: createNewGame
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGame'
      responses:
        '200':
          description: New game created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
        '400':
          description: Error

  /games:
    get:
      tags:
        - Game
      summary: Endpoint to get all games
      operationId: getGames
      responses:
        200:
          description: all games
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Game'

  /game/{id}:
    get:
      tags:
        - Game
      summary: Endpoint to get a game by id
      operationId: getGame
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: game by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'

  /game/{id}/cancel:
    post:
      tags:
        - Game
      summary: cancel started or waiting game
      operationId: cancelGame
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: game canceled
        400:
          description: cannot cancel game

  /game/{id}/players:
    get:
      tags:
        - Game
      summary: get all players of the game
      operationId: getPlayers
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: All players
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        400:
          description: cannot get players

  /games/invitation/{userId}:
    get:
      tags:
        - Game
      summary: get games where user are invited
      operationId: getInvitation
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Games where user are invited
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Game'
        400:
          description: Cannot find games by userId

  /games/{status}:
    get:
      tags:
        - Game
      summary: Endpoint to get game by status { Wait, Started, End}
      operationId: getGameByStatus
      parameters:
        - in: path
          name: status
          required: true
          schema:
            type: string
      responses:
        200:
          description: Games by status
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Game'

  /games/user/{userId}:
    get:
      tags:
        - Game
      summary: Endpoint to get games connected to user
      operationId: getUserGames
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: User Games
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Game'

  /games/user/{userId}/{status}:
    get:
      tags:
        - Game
      summary: Endpoint to get user games with status
      operationId: getUserGamesByStatus
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
            format: int64
        - in: path
          name: status
          required: true
          schema:
            type: string
      responses:
        200:
          description: User Games
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Game'

components:
  schemas:
    LoginUser:
      required:
        - login
        - password
      type: object
      properties:
        login:
          type: string
          nullable: false
        password:
          type: string
          nullable: false

    User:
      required:
        - login
      type: object
      properties:
        id:
          type: integer
          format: int64
        login:
          type: string
          nullable: false
        winningCount:
          type: integer
          format: int64
        losesCount:
          type: integer
          format: int64
        avatarUrl:
          type: string

    ChangeUserData:
      required:
        - userId
      type: object
      properties:
        userId:
          type: integer
          format: int64
        login:
          $ref: '#/components/schemas/LoginUser'

    CreateGame:
      type: object
      properties:
        mainPlayerId:
          type: integer
          format: int64
        players:
          type: array
          items:
            type: integer
            format: int64

    Game:
      type: object
      properties:
        id:
          type: integer
          format: int64
        topic:
          type: string
        players:
          type: integer
          format: int64
        mainPlayer:
          type: integer
          format: int64
        gameState:
          type: string